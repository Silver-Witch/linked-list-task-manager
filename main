#include <iostream>
#include <string>

using namespace std;

// Task Node Structure
struct Task {
    string description;
    int priority;
    Task* next;
};

// Function to create a new task
Task* CreateTask(string description, int priority) {
    Task* newTask = new Task();
    newTask->description = description;
    newTask->priority = priority;
    newTask->next = nullptr;
    return newTask;
}

// Function to add a task at the beginning
Task* AddTaskAtBeginning(Task* head, string description, int priority) {
    Task* newTask = CreateTask(description, priority);
    newTask->next = head;
    return newTask; // New head
}

// Function to add a task at the end
Task* AddTaskAtEnd(Task* head, string description, int priority) {
    Task* newTask = CreateTask(description, priority);
    if (head == nullptr) {
        return newTask; // New head
    } else {
        Task* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newTask;
        return head; // Head remains unchanged
    }
}

// Function to view all tasks
void ViewTasks(Task* head) {
    Task* temp = head;
    int position = 1;
    if (head == nullptr) {
        cout << "No tasks to display." << endl;
    } else {
        while (temp != nullptr) {
            cout << "Task " << position << ": [Description: " << temp->description << ", Priority: " << temp->priority << "]" << endl;
            temp = temp->next;
            position++;
        }
    }
}

// Function to search for a task
void SearchTask(Task* head, string searchDescription) {
    Task* temp = head;
    int position = 1;
    while (temp != nullptr) {
        if (temp->description == searchDescription) {
            cout << "Task found at position " << position << " with priority " << temp->priority << endl;
            return;
        }
        temp = temp->next;
        position++;
    }
    cout << "Task not found." << endl;
}

// Function to delete a task at a specific position
Task* DeleteTaskAtPosition(Task* head, int position) {
    if (position == 1) {
        Task* temp = head;
        head = head->next;
        delete temp;
        return head; // New head
    } else {
        Task* temp = head;
        int count = 1;
        while (count < position - 1 && temp != nullptr) {
            temp = temp->next;
            count++;
        }
        if (temp == nullptr || temp->next == nullptr) {
            cout << "Invalid position." << endl;
            return head; // No changes made
        } else {
            Task* taskToDelete = temp->next;
            temp->next = taskToDelete->next;
            delete taskToDelete;
            return head; // Head remains unchanged
        }
    }
}

// Main function to demonstrate the Task Manager
int main() {
    Task* head = nullptr;
    int choice;
    string description;
    int priority, position;

    do {
        cout << "\nTask Manager Menu:" << endl;
        cout << "1. Add Task at Beginning" << endl;
        cout << "2. Add Task at End" << endl;
        cout << "3. View Tasks" << endl;
        cout << "4. Search for a Task" << endl;
        cout << "5. Delete Task at Position" << endl;
        cout << "6. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter task description: ";
                cin.ignore();
                getline(cin, description);
                cout << "Enter task priority: ";
                cin >> priority;
                head = AddTaskAtBeginning(head, description, priority);
                break;
            case 2:
                cout << "Enter task description: ";
                cin.ignore();
                getline(cin, description);
                cout << "Enter task priority: ";
                cin >> priority;
                head = AddTaskAtEnd(head, description, priority);
                break;
            case 3:
                ViewTasks(head);
                break;
            case 4:
                cout << "Enter task description to search: ";
                cin.ignore();
                getline(cin, description);
                SearchTask(head, description);
                break;
            case 5:
                cout << "Enter position of task to delete: ";
                cin >> position;
                head = DeleteTaskAtPosition(head, position);
                break;
            case 6:
                cout << "Exiting..." << endl;
                break;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    } while (choice != 6);
    return 0;
}

    // Free memory
